Before Start
#######################

Introduction to Lift
=======================

`Lift`_ 是一套使用 `Scala`_ 程式語言的網頁應用程式框架，其腳色類似於使用 Ruby 的 Rails 或使用 Python 的 DJango 網頁框架，提供了我們一套快速方便的工具來建立網頁應用程式。

由於 Scala 採用 Java Virtual Machine 做為執行環境，而且 Lift 符合 Java Servlet 的規範，因此你可以把 Lift 的應用程式包裝成 WAR 檔，並且部署到 Tomcat 或 Jetty 等 Java Servlet Container 上。

與其他常見的網頁應用程式框架不同，並不採用 `MVC`_ 設計模式，而是採了了另一種稱為 View-First 的設計哲學，讓我們的應用程式的模版是單純的 xHTML / HTML5 檔案，而不能含有任何的程式碼。

這種設計哲學讓 Lift 對於網頁的版設計師來說非常友善，他們可以用任何 HTML 網頁編輯器來做為編寫 HTML 頁面的工具，而後端的程式設計師也不必將前端設計師的 HTML 進行大符度的修改，就可以將前端與後端橋接起來。

除了提供了程式碼與外觀嚴格分離的模版系統外，Lift 也內建容易使用的 Ajax / Comet API，以及針對許多安性性的問題在框架的層次就將其阻檔，讓開發者可以專注在程式邏輯的開發上。

本 Tutorial 的順序編排
=========================

由於 Lift 是採用 View-First 而非 MVC 設計模式，再加上其模版系統與眾不同，因此對於已經習慣 MVC 的開發者來說，其學習曲線較陡峭，而且常常不知道要如何將資料使用 Lift 的模版系統來呈現。

本 Tutorial 試著從 View-First 的觀點出發，在第一章時先學習如何從零開始，建立一個可以顯示目前時間的 Hello World 程式，並且介紹 Lift 應用程式的基本組成。

接著我們會在第二章詳細介紹 Lift 的模版系統，讓我們可以把任何資料依照我們的需求注入前端的模版中並顯示給使用者。

等到介紹完模版系統，我們會在第三章開始介紹如何處理 HTML 表單，如何將使用者輸入的表單傳回後端伺服器處理並回應給使用者，接著在第四章會介紹如何使用 Session 等功能，來暫時儲存使用者的資料，供使用者在瀏覽網站的時候使用。

等到介紹完 HTML 表單處理之後，第五章和第六章我們會介紹 Lift 所提供的 AJAX 以及 Comet 功能，讓我們能夠開發具有高度互動性的網頁應用程式。

到這邊為止，我們已經將網頁應用程式的前端部份介紹的差不多了，接下來的第七章會介紹 Lift 所提供的 SiteMap 功能，看 SiteMap 如何提供我們一套簡單的方式來進行網頁的權限控制，以及在第八章介紹如何在 Lift 中撰寫 REST 風格的 API。

最後在第九章，我們會介紹如何在 Lift 中與 SQL 資料庫連線，讓我們可以將使用者的資料儲存到資料庫中，並且在使用者下次連線的時候繼續使用。



.. _Lift: http://liftweb.net/
.. _Scala: http://www.scala-lang.org/
.. _MVC: https://zh.wikipedia.org/zh-tw/MVC
